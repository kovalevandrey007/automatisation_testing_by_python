# Декораторы — это обёртки вокруг Python-функций (или классов), которые
# изменяют работу того, к чему они применяются. В Python декораторы используются
# в основном для декорирования функций (или, соответственно, методов).
# Декоратор — это функция, которая принимает функцию и возвращает функцию.
# Звучит странно? Рассмотрим пример.
# Предположим, имеется функция, которую мы хотим запустить повторно в том
# случае, если при её первом запуске произойдёт сбой. То есть нам нужна функция
# (декоратор), которая вызывает нашу функцию один или два раза (это зависит от
# того, возникнет ли ошибка при первом вызове функции).

import time


def retry(func):
    def wrapper():
        try:
            func()
        except:
            print('retry...')
            func()
    return wrapper()


@retry
def migth_fail():
    print('migth fail')
    raise Exception


migth_fail()
